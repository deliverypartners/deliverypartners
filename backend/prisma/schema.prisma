generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  fullName        String
  email           String           @unique
  phoneNumber     String           @unique
  password        String
  role            UserRole         @default(CUSTOMER)
  isActive        Boolean          @default(true)
  isEmailVerified Boolean          @default(false)
  isPhoneVerified Boolean          @default(false)
  profileImage    String?
  dateOfBirth     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  adminProfile    AdminProfile?
  bookings        Booking[]
  customerProfile CustomerProfile?
  driverProfile   DriverProfile?
  notifications   Notification[]
  reviews         Review[]
  supportTickets  SupportTicket[]
  transactions    Transaction[]
  profile         UserProfile?

  @@map("users")
}

model UserProfile {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  address                String?
  city                   String?
  state                  String?
  pincode                String?
  emergencyContactName   String?
  emergencyContactNumber String?
  languagesSpoken        String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model DriverProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  aadhaarNumber   String    @unique
  licenseNumber   String    @unique
  experienceYears Int
  isOnline        Boolean   @default(false)
  isVerified      Boolean   @default(false)
  rating          Float     @default(0)
  totalTrips      Int       @default(0)
  totalEarnings   Float     @default(0)
  walletBalance   Float     @default(0)
  licenseDocument String?
  aadhaarDocument String?
  profilePhoto    String?
  currentLatitude Float?
  currentLongitude Float?
  currentAddress  String?
  lastLocationUpdate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  driverBookings  Booking[]
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  trips           Trip[]
  vehicles        Vehicle[]

  @@map("driver_profiles")
}

model CustomerProfile {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  preferredPaymentMethod String?
  defaultAddress         String?
  loyaltyPoints          Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

model AdminProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  department  String?
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

model Vehicle {
  id                   String        @id @default(cuid())
  driverProfileId      String
  vehicleType          VehicleType
  vehicleNumber        String        @unique
  vehicleModel         String
  yearOfManufacture    String
  insuranceNumber      String
  isActive             Boolean       @default(true)
  isVerified           Boolean       @default(false)
  registrationDocument String?
  insuranceDocument    String?
  pollutionDocument    String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  bookings             Booking[]
  trips                Trip[]
  driverProfile        DriverProfile @relation(fields: [driverProfileId], references: [id], onDelete: Cascade)

  @@map("vehicles")
}

model Booking {
  id                   String         @id @default(cuid())
  customerId           String
  driverId             String?
  vehicleId            String?
  bookingNumber        String         @unique
  serviceType          ServiceType
  status               BookingStatus  @default(PENDING)
  pickupAddress        String
  pickupLatitude       Float
  pickupLongitude      Float
  pickupDateTime       DateTime
  dropoffAddress       String
  dropoffLatitude      Float
  dropoffLongitude     Float
  estimatedDropoffTime DateTime?
  actualDropoffTime    DateTime?
  estimatedFare        Float
  actualFare           Float?
  discountAmount       Float          @default(0)
  commission           Float          @default(0)
  driverAmount         Float?
  distance             Float?
  duration             Int?
  vehicleName          String?        // Store selected vehicle name for trucks
  vehicleType          String?        // Store vehicle type identifier
  notes                String?
  paymentMethod        PaymentMethod  @default(CASH)
  paymentStatus        PaymentStatus  @default(PENDING)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  customer             User           @relation(fields: [customerId], references: [id])
  driver               DriverProfile? @relation(fields: [driverId], references: [id])
  vehicle              Vehicle?       @relation(fields: [vehicleId], references: [id])
  reviews              Review[]
  transactions         Transaction[]
  trip                 Trip?

  @@map("bookings")
}

model Trip {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  driverProfileId String
  vehicleId       String
  status          TripStatus    @default(STARTED)
  startTime       DateTime      @default(now())
  endTime         DateTime?
  startLatitude   Float?
  startLongitude  Float?
  endLatitude     Float?
  endLongitude    Float?
  actualDistance  Float?
  actualDuration  Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  driverProfile   DriverProfile @relation(fields: [driverProfileId], references: [id])
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id])

  @@map("trips")
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  bookingId     String?
  transactionId String            @unique
  type          TransactionType
  amount        Float
  status        TransactionStatus @default(PENDING)
  paymentMethod PaymentMethod
  description   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  booking       Booking?          @relation(fields: [bookingId], references: [id])
  user          User              @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  reviewer   User     @relation(fields: [reviewerId], references: [id])

  @@map("reviews")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SupportTicket {
  id           String         @id @default(cuid())
  userId       String
  ticketNumber String         @unique
  subject      String
  description  String
  status       TicketStatus   @default(OPEN)
  priority     TicketPriority @default(MEDIUM)
  category     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])

  @@map("support_tickets")
}

model Coupon {
  id                String       @id @default(cuid())
  code              String       @unique
  discountValue     Float
  maxDiscount       Float?
  validFrom         DateTime
  validTo           DateTime
  usageLimitPerUser Int?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  discountType      DiscountType
  status            CouponStatus @default(ACTIVE)

  @@map("coupons")
}

enum UserRole {
  CUSTOMER
  DRIVER
  ADMIN
  SUPER_ADMIN
}

enum VehicleType {
  BIKE
  AUTO
  CAR
  TRUCK
  VAN
  TEMPO
}

enum ServiceType {
  BIKE_DELIVERY
  AUTO_RIDE
  CAR_RIDE
  TRUCK_DELIVERY
  PACKERS_MOVERS
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DRIVER_ASSIGNED
  DRIVER_ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum TripStatus {
  STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  WALLET
  NET_BANKING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  PAYMENT
  REFUND
  COMMISSION
  WALLET_CREDIT
  WALLET_DEBIT
  EARNINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum NotificationType {
  BOOKING_CREATED
  BOOKING_CONFIRMED
  DRIVER_ASSIGNED
  TRIP_ASSIGNED
  TRIP_STARTED
  TRIP_COMPLETED
  PAYMENT_RECEIVED
  STATUS_UPDATE
  GENERAL
  PROMOTIONAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CouponStatus {
  ACTIVE
  INACTIVE
}

model City {
  id          String   @id @default(cuid())
  name        String   @unique
  state       String
  isActive    Boolean  @default(false)
  phase       Int      @default(1)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  areas       Area[]

  @@map("cities")
}

model Area {
  id        String   @id @default(cuid())
  cityId    String
  name      String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@unique([cityId, name])
  @@map("areas")
}
